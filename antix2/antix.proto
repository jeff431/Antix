package antixtransfer;

// node -> master initial connection message
message connect_init_node {
	required string ip_addr = 1;
	required string neighbour_port = 2;
	required string control_port = 3;
}

message connect_init_client {
	required int32 number_of_robots_requested = 1;
	required int32 ip_addr = 2;
	optional int32 pid = 3;
}
// master -> node/client response upon initial connect
message connect_init_response {
	required int32 id = 1;
	required double world_size = 2;
	required int32 sleep_time = 3;
	// only relevant for node
	optional int32 puck_amount = 4;

	// more... same as MasterServerClient/NodeInitialization?
}

// master -> node/client list of nodes
message Node_list {
	message Node {
		required string ip_addr = 1;
		required string neighbour_port = 2;
		required string control_port = 3;
		required int32 id = 4;
		// optional as we only set this right before sending out node list
		optional double x_offset = 5;
	}
	repeated Node node = 1;
}

message connect {
	enum connectionType{
	     CLIENT = 0;
	     SERVER = 1;
	}

	required connectionType type = 1 [default = CLIENT];
}

message MasterServerSlaveServerIntialization {
	required int32 robotsAmt  = 1;
	required int32 teamAmt = 2;
	required int32 minRobotID = 3;
	required int32 maxRobotID = 4;
	required int32 puckAmt = 5;
	required double visionrange = 6; 
	required double fieldofview = 7;	

	message Home {
		required int32 homeRadius = 6;
		required int32 homeX = 7;
		required int32 homeY = 8;
		required int32 homeID = 9;
	}

	repeated Home home = 8;
	optional string leftServersIP = 9;
	optional string rightServersIP = 10;
}

message MasterServerClientInitialization{
	required int32 robotsAllocated = 1;
	required double velocity = 2;
	required double visionrange = 3; 
	required double fieldofview = 4;	
	required double serverwidth = 5;
	required double serverheight = 6;
	required double homeradius = 7;

	optional int32 numberofserver = 8;
	repeated string servers = 9;



	message HomeLocations {
		required int32 team = 1;
		required double homeX = 2;
		required double homeY = 3;
		required string server = 4;
	}

	repeated HomeLocations homelocations  = 10;
}	

message ClientSlaveServerStartup{
	required int32 numberofrobots = 1;
}

message SlaveServerClientInitialization{
	message Robot {
		required int32 robotID = 1;
		required double robotX = 2;
		required double robotY = 3;
		required double robotfacing = 4;
		required int32 robotTeam = 5;
	}

	repeated Robot robot = 1;
}

message RobotRequestMap {
	required int32 robotID = 1;
	required double robotX = 2;
	required double robotY = 3;
	required double robotfacing = 4;
}

message SendMap {
	message Robot {
		required int32 team = 1;
		required int32 id = 2;
		required double x = 3;
		required double y = 4;
	}

	message Puck {
		required double x = 1;
		required double y = 2;
		required bool held = 3;
	}

	repeated Robot robot = 1;
	repeated Puck puck = 2;
}

message ServerRequestMap {
	message MapLocation {
		required double mapX = 1;
		required double mapY = 2;
	}

	repeated MapLocation maplocation = 1;
}

message RequestMovement {
	required int32 robotID = 1;
	required double robotx = 2;
	required double roboty = 3;
}

message MovementUpdate {
	required bool robotmoved  = 1;
}

message RequestPuckHandling {
	required double puckX = 1;
	required double puckY = 2;

	enum ActionType {
	     PICKUP = 1;
	     DROP = 2;	
	}

	required ActionType action = 3;
}

message PuckActionUpdate {
	required bool actionSuccess  = 1;
}

message RequestRobotTransfer {
	required int32 id = 1;
	required int32 team = 2;
	required double x = 3;
	required double y = 4;
	required double a = 5;
	required double v = 6;
	required double w = 7;
	required bool has_puck = 8;
}

// not needed if send message over PUB socket?
message TransferUpdate {
	required bool transferSuccess = 1;
}
